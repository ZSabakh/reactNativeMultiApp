{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\zurab\\\\Desktop\\\\React Native\\\\reactNativeTest\\\\src\\\\screens\\\\ColorOneScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ColorBlock from \"../components/ColorBlock\";\n\nvar reducer = function reducer(state, action) {\n  switch (action.color) {\n    case \"red\":\n      if (state.red + action.amount > 255 || state.red + action.amount < 0) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        red: state.red + action.amount\n      });\n\n    case \"green\":\n      if (state.green + action.amount > 255 || state.green + action.amount < 0) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        green: state.green + action.amount\n      });\n\n    case \"blue\":\n      if (state.blue + action.amount > 255 || state.blue + action.amount < 0) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blue: state.blue + action.amount\n      });\n\n    default:\n      return state;\n  }\n};\n\nfunction ColorOneScreen() {\n  var _useReducer = useReducer(reducer, {\n    red: 0,\n    green: 0,\n    blue: 0\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var red = state.red,\n      green = state.green,\n      blue = state.blue;\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, React.createElement(ColorBlock, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        color: \"red\",\n        amount: 15\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        color: \"red\",\n        amount: -1 * 15\n      });\n    },\n    color: \"Red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorBlock, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        color: \"green\",\n        amount: 15\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        color: \"green\",\n        amount: -1 * 15\n      });\n    },\n    color: \"Green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorBlock, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        color: \"blue\",\n        amount: 15\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        color: \"blue\",\n        amount: -1 * 15\n      });\n    },\n    color: \"Blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      height: 170,\n      width: 140,\n      backgroundColor: \"rgb(\" + red + \", \" + green + \", \" + blue + \")\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Color code: \", \"RGB(\" + red + \", \" + green + \", \" + blue + \")\"));\n}\n\nvar styles = StyleSheet.create({});\nexport default ColorOneScreen;","map":{"version":3,"sources":["C:/Users/zurab/Desktop/React Native/reactNativeTest/src/screens/ColorOneScreen.js"],"names":["React","useReducer","ColorBlock","reducer","state","action","color","red","amount","green","blue","ColorOneScreen","dispatch","height","width","backgroundColor","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport ColorBlock from \"../components/ColorBlock\";\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.color) {\r\n    case \"red\":\r\n      if (state.red + action.amount > 255 || state.red + action.amount < 0) {\r\n        return state;\r\n      }\r\n      return { ...state, red: state.red + action.amount };\r\n    case \"green\":\r\n      if (\r\n        state.green + action.amount > 255 ||\r\n        state.green + action.amount < 0\r\n      ) {\r\n        return state;\r\n      }\r\n      return { ...state, green: state.green + action.amount };\r\n    case \"blue\":\r\n      if (state.blue + action.amount > 255 || state.blue + action.amount < 0) {\r\n        return state;\r\n      }\r\n      return { ...state, blue: state.blue + action.amount };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction ColorOneScreen() {\r\n  const [state, dispatch] = useReducer(reducer, { red: 0, green: 0, blue: 0 });\r\n  const { red, green, blue } = state;\r\n\r\n  //Non reducer method\r\n  // const [red, setRed] = useState(0);\r\n  // const [green, setGreen] = useState(0);\r\n  // const [blue, setBlue] = useState(0);\r\n\r\n  // const setColor = (color, change) => {\r\n  //   switch (color) {\r\n  //     case \"red\":\r\n  //       red + change > 255 || red + change < 0 ? null : setRed(red + change);\r\n  //     case \"green\":\r\n  //       green + change > 255 || green + change < 0\r\n  //         ? null\r\n  //         : setGreen(green + change);\r\n  //     case \"blue\":\r\n  //       blue + change > 255 || blue + change < 0\r\n  //         ? null\r\n  //         : setBlue(blue + change);\r\n  //     default:\r\n  //       return;\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <View>\r\n      <ColorBlock\r\n        onIncrease={() => dispatch({ color: \"red\", amount: 15 })}\r\n        onDecrease={() => dispatch({ color: \"red\", amount: -1 * 15 })}\r\n        color=\"Red\"\r\n      />\r\n      <ColorBlock\r\n        onIncrease={() => dispatch({ color: \"green\", amount: 15 })}\r\n        onDecrease={() => dispatch({ color: \"green\", amount: -1 * 15 })}\r\n        color=\"Green\"\r\n      />\r\n      <ColorBlock\r\n        onIncrease={() => dispatch({ color: \"blue\", amount: 15 })}\r\n        onDecrease={() => dispatch({ color: \"blue\", amount: -1 * 15 })}\r\n        color=\"Blue\"\r\n      />\r\n      <View\r\n        style={{\r\n          height: 170,\r\n          width: 140,\r\n          backgroundColor: `rgb(${red}, ${green}, ${blue})`,\r\n        }}\r\n      />\r\n      <Text>Color code: {`RGB(${red}, ${green}, ${blue})`}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({});\r\n\r\nexport default ColorOneScreen;\r\n"]},"metadata":{},"sourceType":"module"}